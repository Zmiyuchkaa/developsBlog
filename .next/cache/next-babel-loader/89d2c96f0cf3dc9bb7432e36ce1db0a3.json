{"ast":null,"code":"var _jsxFileName = \"/Users/olenarolskaya/FE/developsBlog/components/Posts.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport BlogPosts from './BlogPosts';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    margin: '-30px auto 0',\n    justifyContent: 'center',\n    alignContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      marginTop: 0\n    }\n  },\n  item: {\n    margin: 10,\n    maxHeight: 250,\n    overflow: 'hidden',\n    minWidth: 200,\n    [theme.breakpoints.down('sm')]: {\n      maxHeight: 'unset'\n    }\n  },\n  loader: {\n    width: '80%'\n  },\n  pagination: {\n    position: 'fixed',\n    bottom: 30\n  }\n})); // function Posts({ page, posts, setPage, setPagePosts }: any) {\n//     const classes = useStyles();\n//     React.useEffect(() => {\n//         if (!posts) {\n//             getPosts(page).then((posts) => setPagePosts(page, posts));\n//         }\n//     }, [page, posts, setPagePosts]);\n//     return (\n//         <Grid container spacing={2} className={classes.root}>\n//             { posts\n//                 ? posts.map((post: any, index: number) => (\n//                     <Grid container item spacing={2} xs={4} className={classes.item} key={`${page}-${index}`}>\n//                         <Post\n//                             title={post.title}\n//                             description={post.body}\n//                         />\n//                     </Grid>\n//                 ))\n//                 : <LinearProgress color=\"secondary\" className={classes.loader}/>}\n//             <Pagination\n//                 className={classes.pagination}\n//                 count={10}\n//                 color=\"secondary\"\n//                 page={page}\n//                 onChange={(event, value) => setPage(value)}\n//             />\n//         </Grid>\n//     );\n// }\n// const mapStateToProps = (state: any) => {\n//     return {\n//         page: state.posts.page,\n//         posts: state.posts.pages[state.posts.page],\n//     };\n// };\n// const mapDispatchToProps = (dispatch: any) => {\n//     return bindActionCreators({ setPage, setPagePosts }, dispatch);\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Posts);\n\nconst FactsList = () => {\n  const classes = useStyles();\n  const [posts, setPosts] = React.useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    0: postsPerPage,\n    1: setPostsPerPage\n  } = useState(10);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get(\"https://simple-blog-api.crew.red/posts\");\n      setPosts(res.data);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, []);\n  React.useEffect(() => {\n    axios.get(`https://simple-blog-api.crew.red/posts`).then(response => {\n      setPosts(response.data);\n      console.log(response.data);\n    });\n  }, []);\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexPfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(BlogPosts, {\n    posts: currentPosts,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FactsList;","map":{"version":3,"sources":["/Users/olenarolskaya/FE/developsBlog/components/Posts.tsx"],"names":["React","useEffect","useState","axios","createStyles","makeStyles","BlogPosts","useStyles","theme","root","margin","justifyContent","alignContent","breakpoints","down","marginTop","item","maxHeight","overflow","minWidth","loader","width","pagination","position","bottom","FactsList","classes","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","fetchPosts","res","get","data","then","response","console","log","indexOfLastPost","indexOfFirstPost","indexPfLastPost","currentPosts","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport ReactPaginate from 'react-paginate';\nimport {createStore} from \"../store/store\"\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { setPage, setPagePosts } from '../store/reducers/posts';\nimport { getPosts } from \"../utils/requests\";\nimport { Pagination } from '@material-ui/lab';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from \"@material-ui/core/Grid\";\nimport Post from \"./Post\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport BlogPosts from './BlogPosts';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            margin: '-30px auto 0',\n            justifyContent: 'center',\n            alignContent: 'center',\n            [theme.breakpoints.down('sm')]: {\n                marginTop: 0,\n            },\n        },\n        item: {\n            margin: 10,\n            maxHeight: 250,\n            overflow:'hidden',\n            minWidth: 200,\n            [theme.breakpoints.down('sm')]: {\n                maxHeight: 'unset',\n            },\n        },\n        loader: {\n            width: '80%',\n        },\n        pagination: {\n            position: 'fixed',\n            bottom: 30,\n        },\n    }),\n);\n\n// function Posts({ page, posts, setPage, setPagePosts }: any) {\n//     const classes = useStyles();\n\n//     React.useEffect(() => {\n//         if (!posts) {\n//             getPosts(page).then((posts) => setPagePosts(page, posts));\n//         }\n//     }, [page, posts, setPagePosts]);\n\n//     return (\n//         <Grid container spacing={2} className={classes.root}>\n//             { posts\n//                 ? posts.map((post: any, index: number) => (\n//                     <Grid container item spacing={2} xs={4} className={classes.item} key={`${page}-${index}`}>\n//                         <Post\n//                             title={post.title}\n//                             description={post.body}\n//                         />\n//                     </Grid>\n//                 ))\n//                 : <LinearProgress color=\"secondary\" className={classes.loader}/>}\n//             <Pagination\n//                 className={classes.pagination}\n//                 count={10}\n//                 color=\"secondary\"\n//                 page={page}\n//                 onChange={(event, value) => setPage(value)}\n//             />\n//         </Grid>\n//     );\n// }\n\n// const mapStateToProps = (state: any) => {\n//     return {\n//         page: state.posts.page,\n//         posts: state.posts.pages[state.posts.page],\n//     };\n// };\n\n// const mapDispatchToProps = (dispatch: any) => {\n//     return bindActionCreators({ setPage, setPagePosts }, dispatch);\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Posts);\n\n\nconst FactsList = () => {\n  const classes = useStyles();\n  const [posts, setPosts] = React.useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get(\"https://simple-blog-api.crew.red/posts\");\n      setPosts(res.data);\n      setLoading(false);\n    }\n    fetchPosts();\n  }, []); \n\n  React.useEffect(() => {\n    axios.get(`https://simple-blog-api.crew.red/posts`)\n      .then(response => {\n        setPosts(response.data);\n        console.log(response.data);\n      });\n  }, []);\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexPfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost)\n\n\n  return (\n    <div>\n      <BlogPosts posts={currentPosts} loading={loading} />\n    </div>\n  );   \n}\n\nexport default FactsList;\n\n"]},"metadata":{},"sourceType":"module"}